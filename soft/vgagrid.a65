	*= $0

#define ACC8 .( : .as : sep #$20 : .)
#define ACC16 .( : .al : rep #$20 : .)
#define IDX8 .( : .xs : sep #$10 : .)
#define IDX16 .( : .xl : rep #$10 : .)

orig	.byte 0,0,0

	;.dsb $2000 - *, 0

hello
	lda #221
	sta $fef0

	; enter native mode
	clc
	xce
	
	; 8k stack (woo!)
	IDX16
	ldx #$1fff
	txs
	
	; jsr clear
	
	; top row
	ACC8
	stz orig
	ACC16
	lda #$f000
	stz orig+1
	jsr hline
	
	; bottow row
	ACC8
	stz orig
	ACC16
	lda #$f95b
	sta orig+1
	jsr hline
	
	ldx #0
	.(
xloop
	ACC8
	lda #$f0
	sta orig+2
	ACC16
	stx orig
	jsr vline
	txa
	clc
	adc #4
	tax
	cpx #1280
	bne xloop
	.)
	
	jmp stop

hline	.(
	php
	phy

	ACC16
	IDX16
	lda #$ffff
	ldy #0
loop
	sta [orig],y

	iny
	iny
	cpy #1280
	bne loop

	ply
	plp
	rts
	.)

vline	.(
	php
	phy
	ACC16
	IDX16
	ldy #0
loop
	ACC16
	lda #$ffff
	sta [orig]

	lda orig
	clc
	adc #1280
	sta orig
	.(
	bcc noinc
	ACC8
	inc orig+2
noinc	.)

	iny
	cpy #480
	bne loop
	ply
	plp
	rts
	.)

clear	.(
	ACC16
	IDX16
	lda #0
	ldx #0
loop
	sta $f00000,x
	sta $f10000,x
	sta $f20000,x
	sta $f30000,x
	sta $f40000,x
	sta $f50000,x
	sta $f60000,x
	sta $f70000,x
	sta $f80000,x
	sta $f90000,x
	sta $fa0000,x
	inx
	inx
	cpx #0
	bne loop
	rts
	.)

stop
	; stp
	jmp stop

	.dsb $fffc - *, 0
reset
	.word hello
	.word 0
